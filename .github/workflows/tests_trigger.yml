name: Tests Trigger Workflow

on:
  workflow_call:
    secrets:
      TOKEN:
        required: true
    
    inputs:
      TESTING_FEATURE_BRANCH:
        required: false
        type: string
        default: feature/testing-branch
  
  workflow_dispatch:
    inputs:
      TESTING_FEATURE_BRANCH:
        required: false
        type: string
        default: feature/testing-branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        
      - name: Checkout Production
        uses: actions/checkout@v3
        with:
          ref: production
          repository: sukyca/demo-auto-tag
          token: ${{ secrets.TOKEN }}
          fetch-depth: 0
        
      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git fetch origin

          git remote add upstream https://github.com/sukyca/snowflake-test-repo.git
          git fetch upstream
          echo "::group::Merge upstream/production to origin/production"
          git merge upstream/production --allow-unrelated-histories --strategy-option theirs
          echo "::endgroup::"
          git branch -u origin/production
          
          git checkout --track origin/development
          echo "::group::Merge upstream/development to origin/development"
          git merge upstream/development --allow-unrelated-histories --strategy-option theirs
          echo "::endgroup::"
          git branch -u origin/development
          
          echo "git branches local: $(git branch)"
          echo "git rev-parse: $(git rev-parse --verify ${{ inputs.TESTING_FEATURE_BRANCH }} 2> /dev/null)"
          echo "git ls-remote: $(git ls-remote ${{ inputs.TESTING_FEATURE_BRANCH }} 2> /dev/null)"
          
          if [[ -z $(git ls-remote ${{ inputs.TESTING_FEATURE_BRANCH }} 2> /dev/null) ]]; 
          then
            echo "creating branch"
            git checkout -b ${{ inputs.TESTING_FEATURE_BRANCH }} origin/production
          else
            echo "checkout branch"
            git checkout --track origin/${{ inputs.TESTING_FEATURE_BRANCH }}
          fi
          
          echo "::group::Merge upstream/${{ inputs.TESTING_FEATURE_BRANCH }} to origin/${{ inputs.TESTING_FEATURE_BRANCH }}"
          git merge upstream/${{ inputs.TESTING_FEATURE_BRANCH }} --allow-unrelated-histories --strategy-option theirs
          echo "::endgroup::"
          git push -u origin ${{ inputs.TESTING_FEATURE_BRANCH }}
